@@ The Bank
@@ An object that provides some economy functions.
@@ Requires the gold satchel object in "gold_satchel.txt".

@@ author = Matt Westfall
@@ email = disloops@gmail.com
@@ source = https://github.com/disloops/mushcode/blob/master/util_items/bank.txt

@@ Note that this may use some custom flags created with @flag:
@@ FOR_SALE: Just means it hasn't been picked up from the shop yet
@@ @flag/add FOR_SALE=f,thing,wizard
@@ CLONE: Tells the global "buy" command to create a replica of this item when
@@ bought so that it stays in stock
@@ @flag/add CLONE=c,thing,wizard
@@ SINGLETON: Means that only one can be carried at a time
@@ @flag/add SINGLETON=z,thing,wizard
@@ FISH_MARKET: Applied to locations where you can sell fish
@@ @flag/add FISH_MARKET=q,room,wizard

@@ Created and tested under PennMUSH v1.8.7

@create Bank
@set Bank=QUIET
@set Bank=MONITOR
@set Bank=!NO_COMMAND
@set Bank=WIZARD
@set Bank=SAFE
@lock/basic Bank==#1
@lock/enter Bank==#1

&DESCRIBE Bank=A global banking object.
&SATCHEL Bank=namegrab(lcon(%0), satchel of gold)

&CHECK_GOLD Bank=gte(get(u(satchel,%0)/amount),%1)
@function check_gold=num(Bank), check_gold

&CHARGE_GOLD Bank=attrib_set(u(satchel,%0)/amount,[sub(get(u(satchel,%0)/amount),%1)])
@function charge_gold=num(Bank), charge_gold

&GIVE_GOLD Bank=attrib_set(u(satchel,%0)/amount,[add(get(u(satchel,%0)/amount),%1)])
@function give_gold=num(Bank), give_gold

&CMD_BUY Bank=$buy *:think setq(0,locate(%#,%0,TX));@assert eq(0,comp(loc(%q0),loc(%#)))=@pemit %#=Unable to find that item here.;@assert strmatch(lflags(%q0),*FOR_SALE*)=@pemit %#=It's not for sale.;@break cand(strmatch(lflags(locate(%#,%0,TX)),*SINGLETON*),t(namegrab(lcon(%#),%0)))=@pemit %#=Those are out of stock now.;@assert check_gold(%#,get(%q0/price))=@pemit %#=You can't afford that.;@think [u(charge_gold,%#,get(%q0/price))];@set %q0=!FOR_SALE;@lock %q0;@tel %q0=%#;@if strmatch(lflags(%q0),*CLONE*)={think setq(1,clone(%q0));@tel %q1=loc(%#);@set %q1=FOR_SALE;@lock %q1==#1;@lock/use %q1=+%q1};@remit loc(%#)=name(%#) has purchased the [name(%q0)].

@@ Then we must hook the existing "buy" command:
@hook/override/inline buy=num(Bank),cmd_buy
@@ Note that @hook is not persistent, we have to run it on startup each time

&CMD_SELL Bank=$sell *:@select %0=fish,@include %!/sell_all_fish,#*,@include %!/do_sell=name(%0),@include %!/do_sell=%0

@command/add sell
@hook/override/inline sell=num(Bank),cmd_sell
@@ Note that @hook is not persistent, we have to run it on startup each time

&SELL_ALL_FISH Bank=@assert strmatch(lflags(loc(%#)),*FISH_MARKET*)=@pemit %#=You can't sell that here.;think [setq(0,u(get_fish_price))];@if gt(%q0,0)={think [u(give_gold,%#,%q0))];@include %!/NUKE_FISH=%#;@pemit %#=You have received %q0 gold for your fish.},{@pemit %#=You have no fish!}

&GET_FISH_PRICE Bank=[setq(A,iter(lcon(%#),if(strmatch(parent(%i0),get_parent_fish()),%i0)))][setq(B,lmath(add,iter(%qA,get(%i0/price))))][ceil(fdiv(%qB,2))]
&NUKE_FISH Bank=think setq(A,iter(lcon(%#),if(strmatch(parent(%i0),get_parent_fish()),%i0)));@dolist %qA={@nuke %i0;@nuke %i0}

&DO_SELL Bank=@assert setr(0,namegraball(lcon(%#),%0))=@pemit %#=You do not have that item.;@break gt(words(%q0),1)={@pemit %#=I don't know which one you mean.};@if strmatch(parent(%q0),get_parent_fish())={@assert strmatch(lflags(loc(%#)),*FISH_MARKET*)=@pemit %#=You can't sell that here.;@pemit %#=We buy in bulk. Just say [ansi(h,sell fish)] instead.},{@pemit %#=You cannot sell that.}